// Generated by CoffeeScript 1.8.0
(function() {
  var Dao, connect, dao, pg, _;

  _ = require('lodash');

  pg = require('pg');

  connect = function(o, cb) {
    return pg.connect(o.dbUrl, function(err, client, done) {
      if (err) {
        err = {
          type: 'DAOBASE_SQL_CONNECT_ERROR',
          err: err
        };
        return cb(err);
      }
      o._client = client;
      o._done = function() {
        o._client = void 0;
        return done();
      };
      return cb(null);
    });
  };

  dao = {};

  Dao = function(dbUrl) {
    _.assign(this, dao);
    return this.dbUrl = dbUrl;
  };

  dao.sqlOp = function(sql, cb) {
    var self;
    self = this;
    sql.push(function(err, result) {
      if (err) {
        err = {
          type: 'DAOBASE_GENERIC_SQL_ERROR',
          err: err,
          query: sql
        };
        self._done(err);
        return cb(err);
      }
      return cb(null, result);
    });
    if (!this._client) {
      return connect(this, function(err, result) {
        if (err) {
          return cb(err);
        }
        return self.sqlOp(sql, function(err, result) {
          if (err) {
            return cb(err);
          }
          self._done();
          return cb(null, result);
        });
      });
    } else {
      return this._client.query.apply(this._client, sql);
    }
  };

  dao.commit = function(cb) {
    var self;
    self = this;
    return this.sqlOp(['COMMIT'], function(err, result) {
      if (err) {
        err = {
          type: 'DAOBASE_COMMIT_ERROR',
          err: err
        };
        return cb(err);
      }
      self._done();
      return cb();
    });
  };

  dao.get = function(data, cb) {
    var err, sql;
    if (!((data != null) && data.table && data.field && data.value)) {
      err = {
        type: 'DAOBASE_GET_INVALID_REQUEST',
        data: data
      };
      return cb(err);
    }
    sql = ['SELECT * FROM ' + data.table + ' WHERE ' + data.field + '=$1', [data.value]];
    return this.sqlOp(sql, function(err, result) {
      if (err) {
        err = {
          type: 'DAOBASE_GET_ERROR',
          err: err
        };
        return cb(err);
      }
      if (result.rows.length < 1) {
        err = {
          type: 'DAOBASE_GET_ROW_NOT_FOUND',
          data: data
        };
        return cb(err);
      }
      return cb(null, result.rows[0]);
    });
  };

  dao.insert = function(data, cb) {
    var err, field, i, query;
    if (!((data != null) && data.table && data.values)) {
      err = {
        type: 'DAOBASE_INSERT_INVALID_REQUEST',
        data: data
      };
      return cb(err);
    }
    query = 'INSERT INTO ' + data.table + ' ';
    if (!!data.fields) {
      query += '(' + ((function() {
        var _i, _len, _ref, _results;
        _ref = data.fields;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          field = _ref[_i];
          _results.push(field);
        }
        return _results;
      })()) + ') ';
    }
    query += 'VALUES (' + ((function() {
      var _i, _ref, _results;
      _results = [];
      for (i = _i = 1, _ref = data.values.length; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        _results.push('$' + i);
      }
      return _results;
    })()) + ')';
    if (!!data.returning) {
      query += ' RETURNING ' + data.returning;
    }
    return this.sqlOp([query, data.values], function(err, result) {
      if (err) {
        err = {
          type: 'DAOBASE_INSERT_ERROR',
          err: err,
          data: data
        };
        return cb(err);
      }
      result = data.returning ? result.rows[0][data.returning] : true;
      return cb(null, result);
    });
  };

  dao.tx = function(cb) {
    var d;
    d = new Dao();
    d.dbUrl = this.dbUrl;
    return connect(d, function(err) {
      if (err) {
        return cb(err);
      }
      return d.sqlOp(['BEGIN'], function(err) {
        if (err) {
          err = {
            type: 'DAOBASE_BEGIN_ERROR',
            err: err
          };
          return cb(err);
        }
        return cb(null, d);
      });
    });
  };

  module.exports = Dao;

}).call(this);
